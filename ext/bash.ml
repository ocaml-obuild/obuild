open Printf
open Sys

let is_bash_enabled = ref false
let filename = ref ""
let lib_path = ref ""

let create_bash fn =
    let oc = open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o740 !filename in
    try
        fprintf oc "#!/bin/bash\n";
        fprintf oc "# Automatically generated file.\n# EDIT AT YOUR OWN RISK !!\n\n";
        fprintf oc "# Find library path\n";
        fprintf oc "conf_path=$(ocamlfind printconf conf)\n";
        fprintf oc "lib_path=$(grep path ${conf_path} | sed 's/path=//' | sed 's/\"//g')\n\n";
        close_out oc
    with e ->
        close_out_noerr oc;
        raise e

let init_bash fn cmd stdlibPath =
    is_bash_enabled := true; 
    lib_path := stdlibPath;
    match fn with
        | Some name -> (match cmd with
            | "configure"   -> (filename := name; create_bash name)
            | "build"       -> (filename := name; if Sys.file_exists name then () else create_bash name)
            | _             -> failwith "--bash can only be used with build and configure options")
        | None -> failwith "bash field is empty !!"

let bash_write str =
    if !is_bash_enabled then 
        begin
            let oc = open_out_gen [Open_creat; Open_text; Open_append] 0o740 !filename in
            try
                fprintf oc "%s\n" str;
                close_out oc;
            with e ->
                close_out_noerr oc;
                raise e;
         end
    else ()

let bash_cmd args = 
    let bash_set_var str = bash_write (Str.global_replace (Str.regexp_string !lib_path) "${lib_path}" str) in
    let cmd_tmp = List.hd args in
    let cmd_len = String.length cmd_tmp in
        try
            let cmd_pos = (String.rindex cmd_tmp '/') + 1 in
            let cmd     = String.sub cmd_tmp cmd_pos (cmd_len - cmd_pos) in
                bash_set_var (String.concat " " (cmd :: (List.tl args)))
        with e -> match e with 
            | Not_found -> bash_set_var (String.concat " " args)
            | _ -> raise e

let bash_comment str = bash_write ("\n# " ^ str)

let bash_mkdir str perm = bash_write ("mkdir -m " ^ (sprintf "%o" perm) ^ " " ^ str)

let bash_symlink target link_name = bash_write ("ln -s " ^ target ^ " " ^ link_name)

let bash_generateMlFile version file flags =
    bash_write ("echo \"(* autogenerated file by obuild. do not modify *)\" >> " ^ file);
    bash_write (sprintf "echo \"let project_version = \\\"%s\\\"\" >> %s" version file);
    List.iter (fun (name, v) -> bash_write (sprintf "let project_flag_%s = %b >> %s" name v file)) flags

let bash_generateCFile version file flags =
    bash_write ("echo \"/* autogenerated file by obuild. do not modify */\" >> " ^ file);
    bash_write (sprintf "echo \"#define PROJECT_VERSION \\\"%s\\\"\" >> %s" version file);
    List.iter (fun (name, v) -> bash_write (sprintf "#define PROJECT_FLAG_%s %d >> %s" 
        (String.uppercase name) (if v then 1 else 0) file)) flags


