#!/usr/bin/env bash

libs="unix.cma"

OCAMLC="ocamlc -g"
OCAMLVER=$($OCAMLC -version)
echo "$OCAMLVER"

rm -f ext/compat.ml
if [[ $OCAMLVER < "4.02.0" ]] ; then
    echo "Using compat401.ml"
    cp -f compat401.ml ext/compat.ml
else
    echo "Using compat402.ml"
    cp -f compat402.ml ext/compat.ml
fi

extmodules="compat fugue filepath filesystem"
libmodules="types gconf filetype dag libname pp expr utils modname taskdep helper dagutils process findlibConf scheduler prog dependencies generators hier meta metacache target dist project analyze configure prepare buildprogs build exception"
mainmodules="app_utils sdist doc init install path_generated cmd cmd_build cmd_clean cmd_configure cmd_doc cmd_get cmd_help cmd_infer cmd_init cmd_install cmd_sdist cmd_test main"

set -e

########################################################################
########################################################################
########################################################################
# build ext
cd ext
rm -f ./*.cmi ./*.cmo ./*.o
FILES=()
for mod in $extmodules
do
	echo "COMPILING $mod"
	[ -f "${mod}.mli" ] && $OCAMLC -for-pack Ext -c "${mod}.mli"
	$OCAMLC -for-pack Ext -c "${mod}.ml"
	FILES+=("ext/${mod}.cmo")
done;
cd ..
echo "BUILDING library Ext.cmo"
$OCAMLC -pack -o Ext.cmo -I ext/ "${FILES[@]}"

########################################################################
########################################################################
########################################################################
# build the library
cd obuild
rm -f ./*.cmi ./*.cmo ./*.o

FILES=()
for mod in $libmodules
do
	echo "COMPILING $mod"
	[ -f "${mod}.mli" ] && $OCAMLC -for-pack Obuild -I ../ -c "${mod}.mli"
	$OCAMLC -for-pack Obuild -I ../ -c "${mod}.ml"
	FILES+=("obuild/${mod}.cmo")
done;
cd ..
echo "BUILDING library Obuild.cmo"
$OCAMLC -pack -o Obuild.cmo -I ext/ "${FILES[@]}"

# then bootstrap the main executable
# main needs the version number

cat <<EOF > src/path_generated.ml

(* autogenerated file by bootstrap. do not modify *)

let project_version = "0.0.0"

EOF
cd src
FILES=()
for mod in $mainmodules
do
	echo "COMPILING $mod"
	[ -f "${mod}.mli" ] && $OCAMLC -I ../ -c "${mod}.mli"
	$OCAMLC -I ../ -c "${mod}.ml"
	FILES+=("${mod}.cmo")
done
echo "LINKING obuild.bootstrap"
$OCAMLC -o ../obuild.bootstrap -I ../ ${libs} Ext.cmo Obuild.cmo "${FILES[@]}"
cd ..

rm -f obuild/*.cmi obuild/*.cmo obuild/*.o
rm -f src/*.cmi src/*.cmo src/*.o
rm -f ./*.cmi ./*.o ./*a ./*.cmo
rm -f src/path_generated.ml

########################################################################
########################################################################
########################################################################

# rebuild everything with the bootstraped version
export OCAMLRUNPARAM=b
./obuild.bootstrap clean
if [ -x "$(command -v ocamlopt)" ]; then
	./obuild.bootstrap configure
	time ./obuild.bootstrap build
else
	./obuild.bootstrap configure \
		--disable-executable-native \
		--disable-library-native \
		--disable-library-plugin \
		--enable-executable-bytecode \
		--enable-library-bytecode
	time ./obuild.bootstrap build
	mv dist/build/obuild/obuild.byte dist/build/obuild/obuild
	mv dist/build/obuild-simple/obuild-simple.byte dist/build/obuild-simple/obuild-simple
fi
if [ -x dist/build/obuild/obuild ]; then
	rm obuild.bootstrap
fi
