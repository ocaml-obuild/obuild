#!/usr/bin/env bash

libs="unix.cma"

OCAMLC="ocamlc -g -I +unix"
OCAMLVER=$($OCAMLC -version)
echo "$OCAMLVER"

rm -f lib/base/compat.ml
if [[ $OCAMLVER < "4.02.0" ]] ; then
    echo "Using compat401.ml"
    cp -f compat401.ml lib/base/compat.ml
else
	if [[ $OCAMLVER < "4.03.0" ]] ; then
		echo "Using compat402.ml"
		cp -f compat402.ml lib/base/compat.ml
	else
		echo "Using compat403.ml"
		cp -f compat403.ml lib/base/compat.ml
	fi
fi


extmodules="compat fugue filepath filesystem"
libmodules="types gconf filetype dag libname pp expr utils modname taskdep helper dagutils process findlibConf scheduler prog dependencies generators hier meta metacache target dist project analyze configure prepare buildprogs build exception sdist doc init help install"
mainmodules="path_generated main"

set -e

########################################################################
########################################################################
########################################################################
# build lib (combining base utilities and core library)
cd lib/
rm -f ./*.cmi ./*.cmo ./*.o
rm -f base/*.cmi base/*.cmo base/*.o

# First compile base modules
cd base
FILES=()
for mod in $extmodules
do
	echo "COMPILING base/$mod"
	[ -f "${mod}.mli" ] && $OCAMLC -for-pack Lib.Base -c "${mod}.mli"
	$OCAMLC -for-pack Lib.Base -c "${mod}.ml"
	FILES+=("${mod}.cmo")
done;
echo "BUILDING Base.cmo submodule"
$OCAMLC -pack -o ../base.cmo "${FILES[@]}"
cd ..

# Then compile library modules
LIBFILES=("lib/base.cmo")
for mod in $libmodules
do
	echo "COMPILING $mod"
	[ -f "${mod}.mli" ] && $OCAMLC -for-pack Lib -I ../ -c "${mod}.mli"
	$OCAMLC -for-pack Lib -I ../ -c "${mod}.ml"
	LIBFILES+=("lib/${mod}.cmo")
done;
cd ..
echo "BUILDING library Lib.cmo"
$OCAMLC -pack -o Lib.cmo -I lib/base/ "${LIBFILES[@]}"

# then bootstrap the main executable
# main needs the version number

cat <<EOF > src/path_generated.ml

(* autogenerated file by bootstrap. do not modify *)

let project_version = "0.0.0"

EOF
cd src
FILES=()
for mod in $mainmodules
do
	echo "COMPILING $mod"
	[ -f "${mod}.mli" ] && $OCAMLC -I ../ -c "${mod}.mli"
	$OCAMLC -I ../ -c "${mod}.ml"
	FILES+=("${mod}.cmo")
done
echo "LINKING obuild.bootstrap"
$OCAMLC -o ../obuild.bootstrap -I ../ ${libs} Lib.cmo "${FILES[@]}"
cd ..

rm -f lib/*.cmi lib/*.cmo lib/*.o
rm -f lib/base/*.cmi lib/base/*.cmo lib/base/*.o
rm -f src/*.cmi src/*.cmo src/*.o
rm -f ./*.cmi ./*.o ./*a ./*.cmo
rm -f src/path_generated.ml

########################################################################
########################################################################
########################################################################

# rebuild everything with the bootstraped version
export OCAMLRUNPARAM=b
./obuild.bootstrap clean
if [ -x "$(command -v ocamlopt)" ]; then
	./obuild.bootstrap configure
	time ./obuild.bootstrap build
else
	./obuild.bootstrap configure \
		--disable-executable-native \
		--disable-library-native \
		--disable-library-plugin \
		--enable-executable-bytecode \
		--enable-library-bytecode
	time ./obuild.bootstrap build
	mv dist/build/obuild/obuild.byte dist/build/obuild/obuild
	mv dist/build/obuild-simple/obuild-simple.byte dist/build/obuild-simple/obuild-simple
fi
if [ -x dist/build/obuild/obuild ]; then
	rm obuild.bootstrap
fi
